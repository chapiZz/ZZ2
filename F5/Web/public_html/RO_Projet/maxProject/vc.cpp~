#include "vc.hpp"

using namespace std;

//Constructeur qui permet de charger le pb avec nom des villes la taille du pb et la matrice du pb
vc::vc(const char * nomfic)
{
	int i,j;
	float d;
	string line, value;

	ifstream infile(nomfic);
	if (infile == NULL)
	{
		cout << "Impossible d'ouvrir le fichier " <<endl;
	}
	else
	{
		getline (infile, line);
		istringstream iss(line);
		istringstream iss2;
		getline(iss, value, ';');
		iss2.str(value);
		iss2.clear();
		iss2 >> i;
		_taille = i;
		_matpb = new float * [_taille];
		for (int it = 0; it < _taille; ++it) 
		{
			getline(iss, value, ';');
			_nom_villes.push_back(value);
			//Allocation de la mémoire pour la matrice
			_matpb [it] = new float [_taille];
			for (int jt = 0; jt < _taille ; ++jt)
			{
				_matpb[it][jt] = 0;
			}
		}
		i = 0;
		while (getline (infile,line))
		{
			iss.str(line);
			iss.clear();
			getline(iss,value,';');
			j = 0;
			while(getline(iss,value,';'))
			{
				iss2.str(value);
				iss2.clear();
				iss2 >> d;
				_matpb[i][j] = d;
				j++;
			}
			i++;
		}
	}
}

//Destructeur
vc::~vc()
{
	for (int i = 0; i < _taille; ++i)
	{
		delete [] _matpb[i];
	}
	delete [] _matpb;
}

//Fonction d'evaluation de la fonction objectif pour uun ordonnencement donné en entree
void vc::eval()
{
	_fobj=0;
	for(int i=0; i<_taille-1; i++)
	{
		_fobj=_matpb[_ordo[i]][_ordo[i+1]]+_fobj;
	}
	_fobj=_matpb[_ordo[_taille-1]][_ordo[0]]+_fobj;

}
	
//Fonction de génération aléatoire d'un ordonnencement
void vc::alea()
{
	int i=0,j,entree;
	
	_ordo.clear();
	while(i<_taille)
	{
		entree=rand() % _taille;
		j=0;
		while(j<(int)_ordo.size() && _ordo[j]!=entree)
		{
			j++;
		}
		if(j==(int)_ordo.size())
		{
			_ordo.push_back(entree);
			i++;
		}
	}	
}

//Retourne les attributs de l'objet
void vc::get_res()
{
	cout<<endl;
	cout<<"Voici le trajet à faire : "<<"[";
	for(int i=0;i<_taille;i++)
	{
		cout<<_nom_villes[_ordo[i]]<<" ";
	}
	cout<<_nom_villes[_ordo[0]]<<"]"<<endl;
	cout<<endl;
	cout<<"La distance parcouru est : "<<_fobj<<endl;
	cout<<endl;
	cout<<"le temps de calcul est de : "<<_tpsexec<<" ms"<<endl;
}

void vc::g_alea(const int nbiter)
{
	clock_t start,finish;
	vector <int> cour;
	float fobj;
	int k=0;
	
	start=clock();
	alea();
	cour=_ordo;
	eval();
	fobj=_fobj;
	while(k<nbiter)
	{
		alea();
		eval();
		cout<<_fobj<<endl;
		if(_fobj<fobj)
		{
			fobj=_fobj;
			cour=_ordo;
		}
		k++;
	}
	_fobj=fobj;
	_ordo=cour;
	finish=clock();
	_tpsexec=(finish-start)/CLOCKS_PER_MS;
}
	


